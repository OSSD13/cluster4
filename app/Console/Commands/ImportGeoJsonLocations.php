<?php

namespace App\Console\Commands;

use App\Models\InterestLocation;
use App\Models\TypeLocation;
use App\Models\User;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

class ImportGeoJsonLocations extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:import-geo-json-locations {files?*}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Import locations from a GeoJSON file into interest_location table';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        //
        $user = User::first();
        $files = $this->argument('files');

        if (empty($files)) {
            $files = $files = collect(Storage::disk('geojson')->files())
                ->filter(fn($file) => str_ends_with($file, '.geojson'))
                ->values()
                ->toArray();
            if (empty($files)) {
                $this->error('тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣Мр╣Гр╕Ф р╣Ж р╣Гр╕Щ data/');
                return;
            }

            foreach ($files as $f) {
                $this->line("ЁЯУВ р╕Юр╕Ър╣Др╕Яр╕ер╣М: {$f}");
            }
        }

        foreach ($files as $filename) {
            if (!Storage::disk('geojson')->exists($filename)) {
                $this->warn("тЪая╕П р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М: {$filename}");
                continue;
            }

            $json = Storage::disk('geojson')->get($filename);
            $data = json_decode($json, true);
            $features = $data['features'] ?? [];

            // ЁЯФН р╕Фр╕╢р╕Зр╕Кр╕╖р╣Ир╕нр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Ир╕▓р╕Бр╕Кр╕╖р╣Ир╕нр╣Др╕Яр╕ер╣М р╣Ар╕Кр╣Ир╕Щ 21school.geojson тЖТ school
            $basename = basename($filename);
            preg_match('/\d+-\d+-(.+?)\.geojson$/', $basename, $match);
            $typeKey = $match[1] ?? 'unknown';


            $map = [
                // р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕гр╕▓р╕Кр╕Бр╕▓р╕г, р╕кр╕Цр╕▓р╕Щр╕ир╕╢р╕Бр╕йр╕▓, р╕кр╕▓р╕Шр╕▓р╕гр╕Ур╕кр╕╕р╕В, р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓, р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╕Др╕З, р╣Бр╕ер╕Щр╕Фр╣Мр╕бр╕▓р╕гр╣Мр╕Б, р╕Шр╕Щр╕▓р╕Др╕▓р╕г,р╣Вр╕гр╕Зр╣Бр╕гр╕б, р╕Ыр╕▒р╣Кр╕бр╕Щр╣Йр╕│р╕бр╕▒р╕Щ, р╕лр╣Йр╕▓р╕Зр╕кр╕гр╕гр╕Юр╕кр╕┤р╕Щр╕Др╣Йр╕▓, р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤
                'changwat-center-v2' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕гр╕▓р╕Кр╕Бр╕▓р╕г',
                'amphoe-center-v2' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕гр╕▓р╕Кр╕Бр╕▓р╕г',
                'tesaban' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕гр╕▓р╕Кр╕Бр╕▓р╕г',
                'school' => 'р╕кр╕Цр╕▓р╕Щр╕ир╕╢р╕Бр╕йр╕▓',
                'college-and-university' => 'р╕кр╕Цр╕▓р╕Щр╕ир╕╢р╕Бр╕йр╕▓',
                'hospital' => 'р╕кр╕▓р╕Шр╕▓р╕гр╕Ур╕кр╕╕р╕В',
                'health-care-station' => 'р╕кр╕▓р╕Шр╕▓р╕гр╕Ур╕кр╕╕р╕В',
                'health-center' => 'р╕кр╕▓р╕Шр╕▓р╕гр╕Ур╕кр╕╕р╕В',
                'church' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓',
                'masjid' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓',
                'temple' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓',
                'samnak-song' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓',
                'chedi' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓',
                'shine' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓',
                'susan' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓',
                'pratath' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕▓р╕Зр╕ир╕▓р╕кр╕Щр╕▓',
                'police-center' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╕Др╕З',
                'police-stop' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╕Др╕З',
                'court-center' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╕Др╕З',
                'jail' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╕Др╕З',
                'building-landmark' => 'р╣Бр╕ер╕Щр╕Фр╣Мр╕бр╕▓р╕гр╣Мр╕Б',
                'bank' => 'р╕Шр╕Щр╕▓р╕Др╕▓р╕г',
                'hotel' => 'р╣Вр╕гр╕Зр╣Бр╕гр╕б',
                'gas-station' => 'р╕Ыр╕▒р╣Кр╕бр╕Щр╣Йр╕│р╕бр╕▒р╕Щ',
                'department-of-lands' => 'р╕лр╣Йр╕▓р╕Зр╕кр╕гр╕гр╕Юр╕кр╕┤р╕Щр╕Др╣Йр╕▓',
                'rural-road-center' => 'р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕гр╕▓р╕Кр╕Бр╕▓р╕г',
                'mountain' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'lake' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'beach' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'waterfall' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'hotspring-v2' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'cave' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'kaeng' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'stone-and-hole' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'island' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'geotour' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'view-point' => 'р╣Бр╕ер╕Щр╕Фр╣Мр╕бр╕▓р╕гр╣Мр╕Б',
                'dam' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
                'mining' => 'р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
            ];

            $typeDisplayName = $map[$typeKey] ?? 'р╣Др╕бр╣Ир╕Чр╕гр╕▓р╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Ч';

            $type = TypeLocation::where('tl_name', $typeDisplayName)->first();

            if (!$type) {
                $this->warn("тЪая╕П р╣Др╕бр╣Ир╕Юр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Ч '{$typeDisplayName}' р╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е");
                continue;
            }

            foreach ($features as $f) {
                $props = $f['properties'];
                $coords = $f['geometry']['coordinates'];
                try {
                    InterestLocation::create([
                        'il_name' => $props['name'] ?? $props['NameT'] ?? 'р╣Др╕бр╣Ир╕гр╕╣р╣Й',
                        'il_longlat' => DB::raw("ST_GeomFromText('POINT({$coords[0]} {$coords[1]})', 4326)"),
                        'il_scope' => 5,
                        'il_tl_id' => $type->tl_id,
                        'il_us_id' => $user->id,
                        'il_address' => '-',
                        'il_subdistrict' => '-',
                        'il_district' => '-',
                        'il_province' => '-',
                        'il_postalcode' => '-',
                    ]);
                } catch (\Exception $e) {
                    $this->warn("тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕е {$props['name']} р╣Др╕Фр╣Й: " . $e->getMessage());
                }
            }

            $this->info("тЬЕ р╕Щр╕│р╣Ар╕Вр╣Йр╕▓ {$basename} р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в р╕Ир╕│р╕Щр╕зр╕Щ: " . count($features));
        }

        $this->info('ЁЯОЙ р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щр╕Чр╕╕р╕Бр╣Др╕Яр╕ер╣М');
    }
}
